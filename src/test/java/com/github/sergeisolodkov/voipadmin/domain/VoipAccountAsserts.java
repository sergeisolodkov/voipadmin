package com.github.sergeisolodkov.voipadmin.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VoipAccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoipAccountAllPropertiesEquals(VoipAccount expected, VoipAccount actual) {
        assertVoipAccountAutoGeneratedPropertiesEquals(expected, actual);
        assertVoipAccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoipAccountAllUpdatablePropertiesEquals(VoipAccount expected, VoipAccount actual) {
        assertVoipAccountUpdatableFieldsEquals(expected, actual);
        assertVoipAccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoipAccountAutoGeneratedPropertiesEquals(VoipAccount expected, VoipAccount actual) {
        assertThat(expected)
            .as("Verify VoipAccount auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoipAccountUpdatableFieldsEquals(VoipAccount expected, VoipAccount actual) {
        assertThat(expected)
            .as("Verify VoipAccount relevant properties")
            .satisfies(e -> assertThat(e.getManual()).as("check manual").isEqualTo(actual.getManual()))
            .satisfies(e -> assertThat(e.getUsername()).as("check username").isEqualTo(actual.getUsername()))
            .satisfies(e -> assertThat(e.getPasswordHash()).as("check passwordHash").isEqualTo(actual.getPasswordHash()))
            .satisfies(e -> assertThat(e.getSipServer()).as("check sipServer").isEqualTo(actual.getSipServer()))
            .satisfies(e -> assertThat(e.getSipPort()).as("check sipPort").isEqualTo(actual.getSipPort()))
            .satisfies(e -> assertThat(e.getLineEnable()).as("check lineEnable").isEqualTo(actual.getLineEnable()))
            .satisfies(e -> assertThat(e.getLineNumber()).as("check lineNumber").isEqualTo(actual.getLineNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoipAccountUpdatableRelationshipsEquals(VoipAccount expected, VoipAccount actual) {
        assertThat(expected)
            .as("Verify VoipAccount relationships")
            .satisfies(e -> assertThat(e.getDevice()).as("check device").isEqualTo(actual.getDevice()));
    }
}
