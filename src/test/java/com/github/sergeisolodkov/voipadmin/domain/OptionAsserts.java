package com.github.sergeisolodkov.voipadmin.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OptionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOptionAllPropertiesEquals(Option expected, Option actual) {
        assertOptionAutoGeneratedPropertiesEquals(expected, actual);
        assertOptionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOptionAllUpdatablePropertiesEquals(Option expected, Option actual) {
        assertOptionUpdatableFieldsEquals(expected, actual);
        assertOptionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOptionAutoGeneratedPropertiesEquals(Option expected, Option actual) {
        assertThat(expected)
            .as("Verify Option auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOptionUpdatableFieldsEquals(Option expected, Option actual) {
        assertThat(expected)
            .as("Verify Option relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getDescr()).as("check descr").isEqualTo(actual.getDescr()))
            .satisfies(e -> assertThat(e.getValueType()).as("check valueType").isEqualTo(actual.getValueType()))
            .satisfies(e -> assertThat(e.getMultiple()).as("check multiple").isEqualTo(actual.getMultiple()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOptionUpdatableRelationshipsEquals(Option expected, Option actual) {
        assertThat(expected)
            .as("Verify Option relationships")
            .satisfies(e -> assertThat(e.getVendors()).as("check vendors").isEqualTo(actual.getVendors()))
            .satisfies(e -> assertThat(e.getModels()).as("check models").isEqualTo(actual.getModels()));
    }
}
