package com.github.sergeisolodkov.voipadmin.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DeviceModelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceModelAllPropertiesEquals(DeviceModel expected, DeviceModel actual) {
        assertDeviceModelAutoGeneratedPropertiesEquals(expected, actual);
        assertDeviceModelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceModelAllUpdatablePropertiesEquals(DeviceModel expected, DeviceModel actual) {
        assertDeviceModelUpdatableFieldsEquals(expected, actual);
        assertDeviceModelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceModelAutoGeneratedPropertiesEquals(DeviceModel expected, DeviceModel actual) {
        assertThat(expected)
            .as("Verify DeviceModel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceModelUpdatableFieldsEquals(DeviceModel expected, DeviceModel actual) {
        assertThat(expected)
            .as("Verify DeviceModel relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getConfigurable()).as("check configurable").isEqualTo(actual.getConfigurable()))
            .satisfies(e -> assertThat(e.getLinesAmount()).as("check linesAmount").isEqualTo(actual.getLinesAmount()))
            .satisfies(e -> assertThat(e.getConfigTemplatePath()).as("check configTemplatePath").isEqualTo(actual.getConfigTemplatePath()))
            .satisfies(e -> assertThat(e.getFirmwareFilePath()).as("check firmwareFilePath").isEqualTo(actual.getFirmwareFilePath()))
            .satisfies(e -> assertThat(e.getDeviceType()).as("check deviceType").isEqualTo(actual.getDeviceType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeviceModelUpdatableRelationshipsEquals(DeviceModel expected, DeviceModel actual) {
        assertThat(expected)
            .as("Verify DeviceModel relationships")
            .satisfies(e -> assertThat(e.getOtherDeviceType()).as("check otherDeviceType").isEqualTo(actual.getOtherDeviceType()))
            .satisfies(e -> assertThat(e.getVendor()).as("check vendor").isEqualTo(actual.getVendor()))
            .satisfies(e -> assertThat(e.getOptions()).as("check options").isEqualTo(actual.getOptions()));
    }
}
